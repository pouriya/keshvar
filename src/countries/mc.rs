// DO NOT TOUCH THIS FILE. (Auto-generated by `keshvar-code-generator/src/countries.rs`)

//! A module for country `The Principality of Monaco`

#[cfg(all(feature = "mc", feature = "constants"))]
/// A module to access all constant country data for `The Principality of Monaco`.
///
/// Note that to use this module, `constant` feature should be enabled.
pub mod consts {
    #[allow(unused_imports)]
    use crate::{
        Alpha2, Alpha3, Continent, CurrencyCode, DistanceUnit, Region, SubRegion, WeekDay,
        WorldRegion, GEC, IOC,
    };

    pub const ADDRESS_FORMAT: Option<&str> = None;
    pub const ALPHA2: Alpha2 = Alpha2::MC;
    pub const ALPHA3: Alpha3 = Alpha3::MCO;
    pub const CONTINENT: Continent = Continent::Europe;
    pub const COUNTRY_CODE: usize = 377;
    pub const CURRENCY_CODE: CurrencyCode = CurrencyCode::EUR;
    pub const GEC: Option<GEC> = Some(GEC::MN);
    pub const INTERNATIONAL_PREFIX: &str = "00";
    pub const IOC: Option<IOC> = Some(IOC::MON);
    pub const ISO_SHORT_NAME: &str = "Monaco";
    pub const ISO_LONG_NAME: &str = "The Principality of Monaco";
    pub const OFFICIAL_LANGUAGE_LIST: &[&str] = &["fr"];
    pub const SPOKEN_LANGUAGE_LIST: &[&str] = &["fr"];
    pub const NATIONAL_DESTINATION_CODE_LENGTH_LIST: &[usize] = &[2];
    pub const NATIONAL_NUMBER_LENGTH_LIST: &[usize] = &[8, 9];
    pub const NATIONAL_PREFIX: &str = "0";
    pub const NATIONALITY: Option<&str> = Some("Monegasque");
    pub const NUMBER: &str = "492";
    pub const POSTAL_CODE: bool = true;
    pub const POSTAL_CODE_FORMAT: Option<&str> = Some("980\\d{2}");
    pub const REGION: Option<Region> = Some(Region::Europe);
    pub const START_DAY_OF_WEEK: WeekDay = WeekDay::Monday;
    pub const SUBREGION: Option<SubRegion> = Some(SubRegion::WesternEurope);
    pub const UN_LOCODE: &str = "MC";
    pub const UNOFFICIAL_NAME_LIST: &[&str] = &["Monaco", "M√≥naco", "„É¢„Éä„Ç≥"];
    pub const WORLD_REGION: WorldRegion = WorldRegion::EMEA;
    pub const G7_MEMBER: bool = false;
    pub const G20_MEMBER: bool = false;
    pub const EU_MEMBER: bool = false;
    pub const EEA_MEMBER: bool = false;
    pub const DISTANCE_UNIT: DistanceUnit = DistanceUnit::Km;
    #[cfg(feature = "emojis")]
    pub const EMOJI: &str = "üá≤üá®";
    #[cfg(feature = "translations")]
    pub const TRANSLATIONS: &[(&str, &str)] = &[
        ("ab", "Monaco"),
        ("af", "Monaco"),
        ("ak", "Monaco"),
        ("am", "·àû·äì·äÆ"),
        ("an", "Monaco"),
        ("ar", "ŸÖŸàŸÜÿßŸÉŸà"),
        ("as", "‡¶Æ‡ßã‡¶®\u{9be}‡¶ï‡ßã"),
        ("ay", "Monaco"),
        ("az", "Monako"),
        ("ba", "Monaco"),
        ("be", "–ú–∞–Ω–∞–∫–∞"),
        ("bg", "–ú–æ–Ω–∞–∫–æ"),
        ("bi", "Monaco"),
        ("bn", "‡¶Æ‡ßã‡¶®\u{9be}‡¶ï‡ßã"),
        ("bn_IN", "‡¶Æ‡ßã‡¶®\u{9be}‡¶ï‡ßã"),
        ("br", "Monako"),
        ("bs", "Monako"),
        ("ca", "M√≤naco"),
        ("ce", "–ú–æ–Ω–∞–∫–æ"),
        ("ch", "Monaco"),
        ("cs", "Monako"),
        ("cv", "–ú–æ–Ω–∞–∫–æ"),
        ("cy", "Monaco"),
        ("da", "Monaco"),
        ("de", "Monaco"),
        ("dv", "ﬁâ\u{7ae}ﬁÇ\u{7a7}ﬁÜ\u{7af}"),
        ("dz", "‡Ωò\u{f7c}‡ºã‡Ωì‡ºã‡ΩÄ\u{f7c}"),
        ("ee", "Monaco"),
        ("el", "ŒúŒøŒΩŒ±Œ∫œå"),
        ("en", "Monaco"),
        ("eo", "Monako"),
        ("es", "M√≥naco"),
        ("et", "Monaco"),
        ("eu", "Monako"),
        ("fa", "ŸÖŸàŸÜÿß⁄©Ÿà"),
        ("ff", "Monako"),
        ("fi", "Monaco"),
        ("fo", "Monako"),
        ("fr", "Monaco"),
        ("fy", "Monako"),
        ("ga", "Monac√≥"),
        ("gl", "M√≥naco"),
        ("gn", "Monaco"),
        ("gu", "‡™Æ‡´ã‡™®\u{ac7}‡™ï‡´ã"),
        ("gv", "Monaco"),
        ("ha", "Monaco"),
        ("he", "◊û◊ï◊†◊ß◊ï"),
        ("hi", "‡§Æ‡•ã‡§®\u{948}‡§ï‡•ã"),
        ("hr", "Monako"),
        ("ht", "Monako"),
        ("hu", "Monaco"),
        ("hy", "’Ñ’∏’∂’°’Ø’∏"),
        ("ia", "Monaco"),
        ("id", "Monako"),
        ("io", "Monako"),
        ("is", "M√≥nak√≥"),
        ("it", "Monaco"),
        ("iu", "Monaco"),
        ("ja", "„É¢„Éä„Ç≥"),
        ("ka", "·Éõ·Éù·Éú·Éê·Éô·Éù"),
        ("ki", "Monaco"),
        ("kk", "–ú–æ–Ω–∞–∫–æ"),
        ("kl", "Monaco"),
        ("km", "·ûò\u{17c9}\u{17bc}·ûé·û∂·ûÄ\u{17bc}"),
        ("kn", "‡≤Æ‡≥ä‡≤®‡≤æ‡≤ï‡≥ã"),
        ("ko", "Î™®ÎÇòÏΩî"),
        ("ku", "Monako"),
        ("kv", "–ú–æ–Ω–∞–∫–æ"),
        ("kw", "Monako"),
        ("ky", "–ú–æ–Ω–∞–∫–æ"),
        ("lo", "‡∫õ‡∫∞‡ªÄ‡∫ó‡∫î‡ªÇ‡∫°‡∫ô‡∫≤‡ªÇ‡∫Å"),
        ("lt", "Monakas"),
        ("lv", "Monako"),
        ("mi", "Manako"),
        ("mk", "–ú–æ–Ω–∞–∫–æ"),
        ("ml", "‡¥Æ‡µä‡¥£\u{d3e}‡¥ï\u{d4d}‡¥ï‡µã"),
        ("mn", "–ú–æ–Ω–∞–∫–æ"),
        ("mr", "‡§Æ‡•ã‡§®\u{945}‡§ï‡•ã"),
        ("ms", "Monaco"),
        ("mt", "Monako"),
        (
            "my",
            "·Äô\u{102d}\u{102f}·Äî·Ä¨·ÄÄ\u{102d}\u{102f}·Äî\u{102d}\u{102f}·ÄÑ\u{103a}·ÄÑ\u{1036}",
        ),
        ("na", "Monako"),
        ("nb", "Monaco"),
        ("ne", "‡§Æ‡•ã‡§®‡§æ‡§ï‡•ã"),
        ("nl", "Monaco"),
        ("nn", "Monaco"),
        ("nv", "Monaco"),
        ("oc", "M√≥negue"),
        ("or", "‡¨Æ‡≠ã‡¨®\u{b3e}‡¨ï‡≠ã"),
        ("pa", "‡®Æ\u{a4b}‡®®‡®ï\u{a4b}"),
        ("pi", "‡§Æ‡•ã‡§®‡§æ‡§ï‡•ã"),
        ("pl", "Monako"),
        ("ps", "Monaco"),
        ("pt", "M√≥naco"),
        ("pt_BR", "M√¥naco"),
        ("ro", "Monaco"),
        ("ru", "–ú–æ–Ω–∞–∫–æ"),
        ("rw", "Monako"),
        ("sc", "M√≤naco"),
        ("sd", "Monaco"),
        ("si", "‡∂∏‡∑ú‡∂±\u{dcf}‡∂ö‡∑ù"),
        ("sk", "Monako"),
        ("sl", "Monako"),
        ("so", "Moonako"),
        ("sq", "Monako"),
        ("sr", "–ú–æ–Ω–∞–∫–æ"),
        ("sv", "Monaco"),
        ("sw", "Monaco"),
        ("ta", "‡ÆÆ‡Øä‡Æ©\u{bbe}‡Æï\u{bcd}‡Æï‡Øã"),
        ("te", "‡∞Æ\u{c4b}‡∞®\u{c3e}‡∞ï\u{c4b}"),
        ("tg", "–ú–æ–Ω–∞–∫–æ"),
        ("th", "‡πÇ‡∏°‡∏ô‡∏≤‡πÇ‡∏Å"),
        ("ti", "Monaco"),
        ("tk", "Monako"),
        ("tl", "Monaco"),
        ("tr", "Monako"),
        ("tt", "–ú–∞–Ω–∞–∫–æ"),
        ("ug", "ŸÖŸàŸÜÿßŸÉŸà"),
        ("uk", "–ú–æ–Ω–∞–∫–æ"),
        ("ur", "ŸÖŸàŸÜÿß⁄©Ÿà"),
        ("uz", "Monako"),
        ("ve", "Monaco"),
        ("vi", "Mo-na-c√¥"),
        ("wa", "Monaco"),
        ("wo", "Monaako"),
        ("xh", "Monaco"),
        ("yo", "M√≥nak√≤"),
        ("zh_CN", "Êë©Á∫≥Âì•"),
        ("zh_HK", "Êë©Á¥çÂì•"),
        ("zh_TW", "Êë©Á¥çÂì•"),
        ("zu", "Monaco"),
    ];
    #[cfg(all(feature = "mc", feature = "geo", feature = "constants"))]
    /// GEO data as constants
    pub mod geo {
        pub const LATITUDE: f64 = 43.73841760000001;
        pub const LONGITUDE: f64 = 7.424615799999999;
        pub const MAX_LATITUDE: f64 = 43.7519029;
        pub const MAX_LONGITUDE: f64 = 7.4426;
        pub const MIN_LATITUDE: f64 = 43.7237999;
        pub const MIN_LONGITUDE: f64 = 7.4091049;
        pub const NORTHEAST_LATITUDE: f64 = 43.7519029;
        pub const NORTHEAST_LONGITUDE: f64 = 7.4426;
        pub const SOUTHWEST_LATITUDE: f64 = 43.7237999;
        pub const SOUTHWEST_LONGITUDE: f64 = 7.4091049;
    }
}
#[cfg(all(feature = "mc", feature = "geo"))]
/// GEO module for this country.
pub mod geo {
    use crate::{CountryGeo, CountryGeoBound, CountryGeoBounds};

    /// GEO information for this country.
    pub fn new() -> CountryGeo {
        CountryGeo {
            latitude: 43.73841760000001,
            longitude: 7.424615799999999,
            max_latitude: 43.7519029,
            max_longitude: 7.4426,
            min_latitude: 43.7237999,
            min_longitude: 7.4091049,
            bounds: CountryGeoBounds {
                northeast: CountryGeoBound {
                    latitude: 43.7519029,
                    longitude: 7.4426,
                },
                southwest: CountryGeoBound {
                    latitude: 43.7237999,
                    longitude: 7.4091049,
                },
            },
        }
    }
}

#[cfg(all(feature = "mc", feature = "subdivisions"))]
/// Subdivision module for this country.
pub mod subdivisions {
    #[allow(unused_imports)]
    use crate::{Alpha2, Subdivision, SubdivisionType};
    use std::collections::HashMap;
    // In this state, We do not know if subdivisions have geo or not!
    #[cfg(feature = "geo")]
    #[allow(unused_imports)]
    use crate::SubdivisionGeo;

    /// Subdivisions for this country.
    pub fn new() -> HashMap<&'static str, Subdivision> {
        HashMap::from(
            [

                (
                    "CL",
                    Subdivision{
                        name: "La Colle",
                        country_alpha2: Alpha2::MC,
                        code: "CL",
                        #[cfg(feature = "geo")]
                        geo: None,
                        comments: None,
                        subdivision_type: SubdivisionType::Quarter,
                        #[cfg(feature = "translations")]
                        translations: HashMap::from([("az", "La-Kolle"), ("ca", "La C√≤la"), ("ccp", "ëÑ£ ëÑá\u{1112e}ëÑ£\u{11128}"), ("da", "La Colle"), ("de", "La Colle"), ("en", "La Colle"), ("es", "La Colle"), ("fa", "ŸÑŸá ⁄©ŸÑÿå ŸÖŸàŸÜÿß⁄©Ÿà"), ("fr", "La Colle"), ("gl", "La Colle, M√≥naco"), ("it", "La Colle"), ("ja", "„É©„Éª„Ç≥„É´"), ("ko", "ÎùºÏΩú"), ("nl", "La Colle"), ("pt", "La Colle"), ("ru", "–õ–∞-–ö–æ–ª–ª–µ"), ("sv", "La Colle"), ("tr", "La Colle, Monako"), ("ur", "ŸÑÿß ⁄©ŸàŸÑ€åÿå ŸÖŸàŸÜÿß⁄©Ÿà"), ("zh", "ÊãâÁßëÂ∞î")]),
                        unofficial_name_list: [].to_vec(),
                    }
                ),
                (
                    "CO",
                    Subdivision{
                        name: "La Condamine",
                        country_alpha2: Alpha2::MC,
                        code: "CO",
                        #[cfg(feature = "geo")]
                        geo: None,
                        comments: None,
                        subdivision_type: SubdivisionType::Quarter,
                        #[cfg(feature = "translations")]
                        translations: HashMap::from([("az", "La-Kondamin"), ("be", "–õ–∞-–ö–∞–Ω–¥–∞–º—ñ–Ω"), ("ca", "La Condamina"), ("ccp", "ëÑ£ ëÑá\u{11127}ëÑö\u{11134}ëÑìëÑü\u{1112d}ëÑö\u{11134}"), ("ceb", "La Condamine"), ("cs", "La Condamine"), ("de", "La Condamine"), ("el", "ŒõŒ± ŒöŒøŒΩœÑŒ±ŒºŒØŒΩ"), ("en", "La Condamine"), ("es", "La Condamine"), ("eu", "La Condamine"), ("fa", "ŸÑÿß ⁄©ŸàŸÜÿØÿßŸÖ€åŸÜ"), ("fr", "La Condamine"), ("gl", "La Condamine"), ("he", "◊ú◊î ◊ß◊ï◊†◊ì◊û◊ô◊ü"), ("hu", "La Condamine"), ("hy", "‘º’° ‘ø’∏’∂’§’°’¥’´’∂"), ("id", "La Condamine"), ("it", "La Condamine"), ("ja", "„É©„Éª„Ç≥„É≥„ÉÄ„Éü„Éº„ÉåÂú∞Âå∫"), ("ko", "ÎùºÏΩ©Îã§ÎØº"), ("lt", "La Kondaminas"), ("nl", "La Condamine"), ("pl", "La Condamine"), ("pt", "La Condamine"), ("ru", "–õ–∞-–ö–æ–Ω–¥–∞–º–∏–Ω"), ("sv", "La Condamine"), ("th", "‡∏•‡∏≤‡∏Å‡∏á‡∏î‡∏≤‡∏°\u{e35}‡∏ô"), ("tr", "La Condamine"), ("uk", "–õ–∞-–ö–æ–Ω–¥–∞–º—ñ–Ω"), ("ur", "ŸÑÿß ⁄©ŸàŸÜ⁄àÿßŸÖ€åŸÜ€å"), ("zh", "ÊãâÂ∫∑ËææÊòé")]),
                        unofficial_name_list: [].to_vec(),
                    }
                ),
                (
                    "FO",
                    Subdivision{
                        name: "Fontvieille",
                        country_alpha2: Alpha2::MC,
                        code: "FO",
                        #[cfg(feature = "geo")]
                        geo: None,
                        comments: None,
                        subdivision_type: SubdivisionType::Quarter,
                        #[cfg(feature = "translations")]
                        translations: HashMap::from([("az", "Fonvey (Monako)"), ("ca", "F√≤ntvielha"), ("ccp", "ëÑú\u{11127}ëÑö\u{11134}ëÑë\u{11134}ëÑû\u{11128}ëÑ£ëÑ¨"), ("ceb", "Fontvieille"), ("cs", "Fontvieille"), ("da", "Fontvieille (Monaco)"), ("de", "Fontvieille"), ("el", "Œ¶ŒøŒΩœÑŒ≤ŒπŒ≠Œ≥"), ("en", "Fontvieille"), ("es", "Fontvieille"), ("eu", "Fontvieille (Monako)"), ("fa", "ŸÅŸàŸÜŸà€åÿå ŸÖŸàŸÜÿß⁄©Ÿà"), ("fr", "Fontvieille"), ("gl", "Fontvieille, M√≥naco"), ("he", "◊§◊ï◊†◊ò◊ï◊ô◊ô◊ú"), ("hu", "Fontvieille"), ("hy", "’ñ’∏’∂’æ’µ’•’µ"), ("it", "Fontvieille"), ("ja", "„Éï„Ç©„É≥„É¥„Ç£„Ç®„Ç§„É¶"), ("ko", "ÌêÅÎπÑÏóêÏú†"), ("lt", "Fonvjƒójus"), ("mk", "–§–æ–Ω–≤—ò–µ—ò"), ("nb", "Fontvieille"), ("nl", "Fontvieille"), ("no", "Fontvieille"), ("pl", "Fontvieille"), ("pt", "Fontvieille"), ("ru", "–§–æ–Ω–≤—å–µ–π"), ("sv", "Fontvieille (del av en befolkad plats)"), ("th", "‡∏ü‡∏á‡∏ß\u{e35}‡πÅ‡∏¢‡∏¢\u{e4c}"), ("tr", "Fontvieille, Monako"), ("uk", "–§–æ–Ω—Ç–≤—ñ–ª–ª—å"), ("zh", "Ëä≥ÁâπÁª¥ËÄ∂")]),
                        unofficial_name_list: [].to_vec(),
                    }
                ),
                (
                    "GA",
                    Subdivision{
                        name: "La Gare",
                        country_alpha2: Alpha2::MC,
                        code: "GA",
                        #[cfg(feature = "geo")]
                        geo: None,
                        comments: None,
                        subdivision_type: SubdivisionType::Quarter,
                        #[cfg(feature = "translations")]
                        translations: HashMap::from([("ccp", "ëÑ£ ëÑâëÑ¢ëÑ¨"), ("en", "La Gare"), ("ru", "–õ–∞ –ì–∞")]),
                        unofficial_name_list: [].to_vec(),
                    }
                ),
                (
                    "JE",
                    Subdivision{
                        name: "jardin exotique de Monaco",
                        country_alpha2: Alpha2::MC,
                        code: "JE",
                        #[cfg(feature = "geo")]
                        geo: None,
                        comments: None,
                        subdivision_type: SubdivisionType::Quarter,
                        #[cfg(feature = "translations")]
                        translations: HashMap::from([("ccp", "ëÑéëÑ¢\u{11134}ëÑì\u{11128}ëÑö\u{11134} ëÑÉëÑ¨ëÑá\u{11134}ëÑé\u{1112e}ëÑë\u{11128}ëÑá\u{11134} ëÑìëÑ¨ ëÑü\u{11127}ëÑö\u{11134}ëÑá\u{1112e}"), ("de", "Exotischer Garten von Monaco"), ("en", "Jardin Exotique de Monaco"), ("es", "Jard√≠n Ex√≥tico de M√≥naco"), ("fr", "jardin exotique de Monaco"), ("it", "Giardino esotico di Monaco"), ("ja", "ÁÜ±Â∏ØÂÖ¨Âúí"), ("nl", "Jardin Exotique de Monaco"), ("pl", "Jardin exotique de Monaco"), ("ru", "–ñ–∞—Ä–¥–µ–Ω-–≠–∫–∑–æ—Ç–∏–∫"), ("th", "‡∏å‡∏≤‡∏£\u{e4c}‡πÅ‡∏î\u{e47}‡∏á‡πÅ‡∏≠‡∏Å‡∏ã‡∏≠‡∏ï\u{e34}‡∏Å"), ("uk", "–ï–∫–∑–æ—Ç–∏—á–Ω–∏–π —Å–∞–¥ –ú–æ–Ω–∞–∫–æ"), ("zh", "Êë©Á¥çÂì•ÁÜ±Â∏∂ÂÖ¨Âúí")]),
                        unofficial_name_list: [].to_vec(),
                    }
                ),
                (
                    "LA",
                    Subdivision{
                        name: "Larvotto/Bas Moulins",
                        country_alpha2: Alpha2::MC,
                        code: "LA",
                        #[cfg(feature = "geo")]
                        geo: None,
                        comments: None,
                        subdivision_type: SubdivisionType::Quarter,
                        #[cfg(feature = "translations")]
                        translations: HashMap::from([("az", "Larvotto"), ("ca", "Larvot e Molins Bas"), ("ccp", "ëÑ£ëÑ¢\u{11134}ëÑû\u{1112e}ëÑë\u{1112e}"), ("de", "Larvotto"), ("el", "ŒõŒ±œÅŒ≤ŒøœÑœÑœå"), ("en", "Larvotto"), ("es", "Larvotto"), ("fa", "ŸÑÿßÿ±Ÿàÿ™Ÿà"), ("fr", "Larvotto/Bas Moulins"), ("gl", "Larvotto"), ("it", "Larvotto"), ("ja", "„É©„É´„É¥„Ç©„ÉÉ„Éà"), ("ko", "ÎùºÎ•¥Î≥¥ÌÜ†"), ("nl", "Larvotto"), ("pt", "Larvotto"), ("ru", "–õ–∞—Ä–≤–æ—Ç—Ç–æ"), ("sv", "Larvotto"), ("th", "‡∏•‡∏≤‡∏£\u{e4c}‡∏ß‡∏≠‡πÇ‡∏ï"), ("tr", "Larvotto"), ("ur", "ŸÑÿßÿ±ŸàŸàŸπŸà"), ("zh", "ÊãâÊ≤ÉÊâò")]),
                        unofficial_name_list: [].to_vec(),
                    }
                ),
                (
                    "MA",
                    Subdivision{
                        name: "Malbousquet",
                        country_alpha2: Alpha2::MC,
                        code: "MA",
                        #[cfg(feature = "geo")]
                        geo: None,
                        comments: None,
                        subdivision_type: SubdivisionType::Quarter,
                        #[cfg(feature = "translations")]
                        translations: HashMap::from([("ccp", "ëÑüëÑ£\u{11134}ëÑù\u{1112f}ëÑá\u{1112e}ëÑ†ëÑ¨ëÑñ\u{11134}"), ("en", "Malbousquet"), ("fr", "Malbousquet"), ("ru", "–ú–∞–ª—å–±—É–∫–µ")]),
                        unofficial_name_list: [].to_vec(),
                    }
                ),
                (
                    "MC",
                    Subdivision{
                        name: "Monte-Carlo",
                        country_alpha2: Alpha2::MC,
                        code: "MC",
                        #[cfg(feature = "geo")]
                        geo: None,
                        comments: None,
                        subdivision_type: SubdivisionType::Quarter,
                        #[cfg(feature = "translations")]
                        translations: HashMap::from([("af", "Monte Carlo"), ("ar", "ŸÖŸàŸÜÿ™ ŸÉÿßÿ±ŸÑŸà"), ("az", "Monte Karlo"), ("be", "–ú–æ–Ω—Ç—ç-–ö–∞—Ä–ª–∞"), ("bg", "–ú–æ–Ω—Ç–µ –ö–∞—Ä–ª–æ"), ("bs", "Monte Carlo"), ("ca", "Montcarles"), ("ccp", "ëÑü\u{11127}ëÑö\u{11134}ëÑëëÑ¨ ëÑáëÑ¢\u{11134}ëÑ£\u{1112e}"), ("ceb", "Monte-Carlo"), ("cs", "Monte Carlo"), ("cy", "Monte-Carlo"), ("da", "Monte Carlo"), ("de", "Monte-Carlo"), ("el", "ŒúœåŒΩœÑŒµ ŒöŒ¨œÅŒªŒø"), ("en", "Monte Carlo"), ("es", "Montecarlo"), ("et", "Monte Carlo"), ("eu", "Monte-Carlo"), ("fa", "ŸÖŸàŸÜÿ™\u{200c}⁄©ÿßÿ±ŸÑŸà"), ("fi", "Monte Carlo"), ("fr", "Monte-Carlo"), ("ga", "Monte Carlo"), ("gl", "Monte Carlo"), ("he", "◊û◊ï◊†◊ò◊î ◊ß◊®◊ú◊ï"), ("hi", "‡§Æ‡•ã\u{902}‡§ü‡•Ä ‡§ï‡§æ‡§∞\u{94d}‡§≤‡•ã"), ("hr", "Monte Carlo"), ("hu", "Monte-Carlo"), ("hy", "’Ñ’∏’∂’ø’• ‘ø’°’º’¨’∏"), ("id", "Monte Carlo"), ("is", "Monte Carlo"), ("it", "Monte Carlo"), ("ja", "„É¢„É≥„ÉÜ„Ç´„É´„É≠"), ("ka", "·Éõ·Éù·Éú·É¢·Éî-·Éô·Éê·É†·Éö·Éù"), ("kk", "–ú–æ–Ω—Ç–µ-–ö–∞—Ä–ª–æ"), ("ko", "Î™¨ÌÖåÏπ¥Î•ºÎ°ú"), ("lt", "Monte Karlas"), ("lv", "Montekarlo"), ("mk", "–ú–æ–Ω—Ç–µ –ö–∞—Ä–ª–æ"), ("mr", "‡§Æ‡§æ\u{901}‡§ü\u{947} ‡§ï‡§æ‡§∞\u{94d}‡§≤‡•ã"), ("ms", "Monte Carlo"), ("my", "·Äô\u{103d}·Äî\u{103a}·Äê\u{102e}·ÄÄ·Ä¨·Äú\u{102d}\u{102f}·Äô·Äº\u{102d}\u{102f}\u{1037}"), ("nb", "Monte Carlo"), ("nl", "Monte Carlo"), ("no", "Monte Carlo"), ("pl", "Monte Carlo"), ("ps", "ŸÖŸàŸÜÿ™ ⁄©ÿßÿ±ŸÑŸà"), ("pt", "Monte Carlo"), ("ro", "Monte Carlo"), ("ru", "–ú–æ–Ω—Ç–µ-–ö–∞—Ä–ª–æ"), ("sk", "Monte Carlo"), ("sl", "Monte Carlo"), ("sq", "Monte Karlo"), ("sr", "–ú–æ–Ω—Ç–µ –ö–∞—Ä–ª–æ"), ("sr_Latn", "Monte Karlo"), ("sv", "Monte Carlo"), ("ta", "‡ÆÆ\u{bbe}‡Æ©\u{bcd}‡Æü‡Øá ‡Æï\u{bbe}‡Æ∞\u{bcd}‡Æ≤‡Øã"), ("th", "‡∏°‡∏á‡πÄ‡∏ï-‡∏Å‡∏≤‡∏£\u{e4c}‡πÇ‡∏•"), ("tr", "Monte Carlo"), ("uk", "–ú–æ–Ω—Ç–µ-–ö–∞—Ä–ª–æ"), ("ur", "ŸÖŸàŸÜŸπ€å ⁄©ÿßÿ±ŸÑŸà"), ("uz", "Montekarlo"), ("vi", "Monte Carlo"), ("yue", "ËíôÂú∞Âç°ÁæÖ"), ("yue_Hans", "ËíôÂú∞Âç°ÁΩó"), ("zh", "ËíôÁâπÂç°Ê¥õ")]),
                        unofficial_name_list: [].to_vec(),
                    }
                ),
                (
                    "MG",
                    Subdivision{
                        name: "Moneghetti",
                        country_alpha2: Alpha2::MC,
                        code: "MG",
                        #[cfg(feature = "geo")]
                        geo: None,
                        comments: None,
                        subdivision_type: SubdivisionType::Quarter,
                        #[cfg(feature = "translations")]
                        translations: HashMap::from([("az", "Moneqetti"), ("bg", "–ú–æ–Ω–µ–≥—Ö–µ—Ç–∏"), ("ca", "Moneguet"), ("ccp", "ëÑü\u{11127}ëÑöëÑ¨ëÑäëÑ¨ëÑë\u{11128}"), ("ceb", "Moneghetti"), ("de", "Moneghetti"), ("en", "Moneghetti"), ("es", "Monegeti"), ("fa", "ŸÑŸá ŸÖŸàŸÜ⁄Øÿ™€å"), ("fr", "Moneghetti"), ("gl", "Moneghetti"), ("hu", "Moneghetti"), ("it", "Moneghetti"), ("ja", "„É¢„Éç„Ç¶„ÉÉ„ÉÜ„Ç£"), ("ko", "Î™®ÎÑ§Í≤åÌã∞"), ("nl", "Moneghetti"), ("pt", "Moneghetti"), ("ru", "–ú–æ–Ω–µ–≥–µ—Ç—Ç–∏"), ("sv", "Moneghetti"), ("th", "‡πÄ‡∏•‡∏°‡∏≠‡πÄ‡∏ô‡∏≠‡πÅ‡∏Å‡∏ï\u{e35}"), ("zh", "Ëé´ÂÜÖÁõñËíÇ")]),
                        unofficial_name_list: [].to_vec(),
                    }
                ),
                (
                    "MO",
                    Subdivision{
                        name: "Monaco-Ville",
                        country_alpha2: Alpha2::MC,
                        code: "MO",
                        #[cfg(feature = "geo")]
                        geo: None,
                        comments: None,
                        subdivision_type: SubdivisionType::Quarter,
                        #[cfg(feature = "translations")]
                        translations: HashMap::from([("ar", "ŸÖŸàŸÜÿßŸÉŸà ŸÅŸäŸÑ"), ("az", "Monako Vill"), ("be", "–ì–æ—Ä–∞–¥ –ú–∞–Ω–∞–∫–∞"), ("ca", "Vila de M√≤naco"), ("ccp", "ëÑü\u{11127}ëÑöëÑá\u{1112e}-ëÑû\u{11128}ëÑ£ëÑ¨"), ("ceb", "Commune de Monaco"), ("cs", "Monaco-Ville"), ("da", "Monaco-Ville"), ("de", "Monaco-Ville"), ("el", "ŒúŒøŒΩŒ±Œ∫œå-ŒíŒπŒª"), ("en", "Monaco-Ville"), ("es", "M√≥naco"), ("et", "Monaco-Ville"), ("eu", "Monako"), ("fa", "ŸÖŸàŸÜÿß⁄©ŸàŸà€åŸÑ"), ("fr", "Monaco-Ville"), ("gl", "Monaco-Ville"), ("he", "◊û◊ï◊†◊ß◊ï-◊ï◊ô◊ú"), ("hu", "Monaco"), ("hy", "’Ñ’∏’∂’°’Ø’∏"), ("it", "Monaco Vecchia"), ("ja", "„É¢„Éä„Ç≥„Éª„É¥„Ç£„É´"), ("kk", "–ú–æ–Ω–∞–∫–æ"), ("ko", "Î™®ÎÇòÏΩîÎπå"), ("lt", "Monakas"), ("nl", "Monaco-Ville"), ("pl", "Monaco-Ville"), ("ps", "ŸÖŸàŸÜÿß⁄©Ÿà Ÿà€åŸÑ"), ("pt", "Monaco-Ville"), ("ru", "–ú–æ–Ω–∞–∫–æ"), ("sv", "Monaco-Ville"), ("te", "‡∞Æ\u{c4a}‡∞®\u{c3e}‡∞ï\u{c4b}-‡∞µ\u{c3f}‡∞≤\u{c4d}"), ("th", "‡∏°‡∏≠‡∏ô‡∏≤‡πÇ‡∏Å-‡∏ß\u{e35}‡∏•"), ("tr", "Monaco-Ville"), ("uk", "–ú–æ–Ω–∞–∫–æ"), ("ur", "ŸÖŸàŸÜÿß⁄©Ÿà ÿ¥€Åÿ±"), ("uz", "Monako"), ("zh", "Êë©Á∫≥Âì•Âüé")]),
                        unofficial_name_list: [].to_vec(),
                    }
                ),
                (
                    "MU",
                    Subdivision{
                        name: "Moulins",
                        country_alpha2: Alpha2::MC,
                        code: "MU",
                        #[cfg(feature = "geo")]
                        geo: None,
                        comments: None,
                        subdivision_type: SubdivisionType::Quarter,
                        #[cfg(feature = "translations")]
                        translations: HashMap::from([("ccp", "ëÑü\u{1112f}ëÑ£\u{11128}ëÑö\u{11134}"), ("en", "Moulins"), ("fr", "Moulins"), ("ja", "„É†„Éº„É©„É≥"), ("ru", "–ú–æ–ª–∏–Ω")]),
                        unofficial_name_list: [].to_vec(),
                    }
                ),
                (
                    "PH",
                    Subdivision{
                        name: "Port Hercule",
                        country_alpha2: Alpha2::MC,
                        code: "PH",
                        #[cfg(feature = "geo")]
                        geo: None,
                        comments: None,
                        subdivision_type: SubdivisionType::Quarter,
                        #[cfg(feature = "translations")]
                        translations: HashMap::from([("ccp", "ëÑõ\u{1112e}ëÑ¢\u{11134}ëÑë\u{11134} ëÑ¶ëÑ¢\u{11134}ëÑá\u{11128}ëÑÖ\u{1112a}ëÑ£ëÑå\u{11134}"), ("ceb", "Port Hercule"), ("de", "Port Hercule"), ("el", "ŒõŒπŒºŒ¨ŒΩŒπ œÑŒøœÖ ŒóœÅŒ±Œ∫ŒªŒÆ"), ("en", "Port Hercules"), ("es", "Puerto H√©rcules"), ("fr", "Port Hercule"), ("it", "Port Hercule"), ("ja", "„Éù„Éº„Éà„Ç®„É´„Ç≠„É•„Éº„É´"), ("nl", "Port Hercules"), ("ru", "–ü–æ—Ä—Ç –ì–µ—Ä–∫—É–ª–µ—Å"), ("sv", "Port Hercule")]),
                        unofficial_name_list: [].to_vec(),
                    }
                ),
                (
                    "SD",
                    Subdivision{
                        name: "√©glise Sainte-D√©vote",
                        country_alpha2: Alpha2::MC,
                        code: "SD",
                        #[cfg(feature = "geo")]
                        geo: None,
                        comments: None,
                        subdivision_type: SubdivisionType::Quarter,
                        #[cfg(feature = "translations")]
                        translations: HashMap::from([("ccp", "ëÑ•ëÑ¨ëÑö\u{11134}ëÑë\u{11134}-ëÑì\u{11128}ëÑû\u{1112e}ëÑñ\u{11134} ëÑáëÑõëÑ¨ëÑ£\u{11134}"), ("de", "Ravin de Sainte-D√©vote"), ("en", "Sainte-D√©vote Chapel"), ("es", "iglesia de Santa Devota"), ("fr", "√©glise Sainte-D√©vote"), ("hu", "Ravin de Sainte-D√©vote"), ("it", "Ravina di Santa Devota"), ("ja", "„Çµ„É≥„Éª„Éá„Éú„Éº„ÉÜ"), ("nl", "√âglise Sainte-D√©vote"), ("ru", "–°–∞–Ω—Ç–µ-–î–µ–≤–æ—Ç–µ")]),
                        unofficial_name_list: [].to_vec(),
                    }
                ),
                (
                    "SO",
                    Subdivision{
                        name: "La Source",
                        country_alpha2: Alpha2::MC,
                        code: "SO",
                        #[cfg(feature = "geo")]
                        geo: None,
                        comments: None,
                        subdivision_type: SubdivisionType::Quarter,
                        #[cfg(feature = "translations")]
                        translations: HashMap::from([("ccp", "ëÑ£ ëÑ•\u{1112e}ëÑ¢\u{11134}ëÑå\u{11134}"), ("en", "La Source"), ("fr", "La Source")]),
                        unofficial_name_list: [].to_vec(),
                    }
                ),
                (
                    "SP",
                    Subdivision{
                        name: "Sp√©lugues",
                        country_alpha2: Alpha2::MC,
                        code: "SP",
                        #[cfg(feature = "geo")]
                        geo: None,
                        comments: None,
                        subdivision_type: SubdivisionType::Quarter,
                        #[cfg(feature = "translations")]
                        translations: HashMap::from([("ccp", "ëÑå\u{11133}ëÑõëÑ¨ëÑ£\u{11128}ëÑÖ\u{1112a}ëÑâëÑå\u{11134}"), ("en", "Sp√©lugues"), ("fr", "Sp√©lugues"), ("ru", "–°–ø–∏–ª–∞–≥–µ")]),
                        unofficial_name_list: [].to_vec(),
                    }
                ),
                (
                    "SR",
                    Subdivision{
                        name: "La Rousse",
                        country_alpha2: Alpha2::MC,
                        code: "SR",
                        #[cfg(feature = "geo")]
                        geo: None,
                        comments: None,
                        subdivision_type: SubdivisionType::Quarter,
                        #[cfg(feature = "translations")]
                        translations: HashMap::from([("az", "Sen-Roman"), ("ca", "La Rossa e Sant Roman"), ("ccp", "ëÑ•ëÑ¨ëÑö\u{11134}ëÑë\u{11134} ëÑ¢\u{11127}ëÑüëÑö\u{11134}"), ("ceb", "Saint-Roman"), ("de", "La Rousse"), ("en", "Saint Roman"), ("es", "La Rousse/San Roman"), ("fr", "La Rousse"), ("gl", "Saint Roman"), ("it", "La Rousse/Saint-Roman"), ("ko", "ÏÉùÎ°úÎßù"), ("nl", "Saint Roman, Monaco"), ("pt", "La Rousse/Saint-Roman"), ("ru", "–°–µ–Ω-–†–æ–º–∞–Ω"), ("sv", "Saint-Roman, Monaco"), ("ur", "ÿ≥€åŸÜŸπ ÿ±ŸàŸÖŸÜÿå ŸÖŸàŸÜÿß⁄©Ÿà"), ("zh", "Âú£ÁΩóÊõº")]),
                        unofficial_name_list: [].to_vec(),
                    }
                ),
                (
                    "VR",
                    Subdivision{
                        name: "Vallon de la Rousse",
                        country_alpha2: Alpha2::MC,
                        code: "VR",
                        #[cfg(feature = "geo")]
                        geo: None,
                        comments: None,
                        subdivision_type: SubdivisionType::Quarter,
                        #[cfg(feature = "translations")]
                        translations: HashMap::from([("ccp", "ëÑûëÑ£\u{11127}ëÑö\u{11134} ëÑìëÑ¨ ëÑ£ ëÑ¢\u{1112f}ëÑå\u{11134}"), ("en", "Vallon de la Rousse"), ("fr", "Vallon de la Rousse"), ("nl", "La Rousse"), ("ru", "–í–∞–ª–ª–æ–Ω –¥–µ –ª–∞ –†–æ—É—Å")]),
                        unofficial_name_list: [].to_vec(),
                    }
                ),
            ]

        )
    }
}
#[allow(unused_imports)]
use crate::{
    Alpha2, Alpha3, Continent, Country, CurrencyCode, DistanceUnit, Region, SubRegion, VatRates,
    WeekDay, WorldRegion, GEC, IOC,
};
#[allow(unused_imports)]
use std::collections::HashMap;
#[cfg(feature = "mc")]
/// [`Country`](crate::Country) struct for this country.
pub fn new() -> Country {
    Country {
        alpha2: Alpha2::MC,
        alpha3: Alpha3::MCO,
        address_format: None,
        continent: Continent::Europe,
        country_code: 377,
        currency_code: CurrencyCode::EUR,
        gec: Some(GEC::MN),
        #[cfg(feature = "geo")]
        geo: geo::new(),
        international_prefix: "00",
        ioc: Some(IOC::MON),
        iso_long_name: "The Principality of Monaco",
        iso_short_name: "Monaco",
        official_language_list: ["fr"].to_vec(),
        spoken_language_list: ["fr"].to_vec(),
        national_destination_code_length_list: [2].to_vec(),
        national_number_length_list: [8, 9].to_vec(),
        national_prefix: "0",
        nationality: Some("Monegasque"),
        number: "492",
        postal_code: true,
        postal_code_format: Some("980\\d{2}"),
        region: Some(Region::Europe),
        start_of_week: WeekDay::Monday,
        subregion: Some(SubRegion::WesternEurope),
        un_locode: "MC",
        unofficial_name_list: ["Monaco", "M√≥naco", "„É¢„Éä„Ç≥"].to_vec(),
        world_region: WorldRegion::EMEA,
        #[cfg(feature = "emojis")]
        emoji: "üá≤üá®",
        #[cfg(feature = "translations")]
        translations: HashMap::from([
            ("ab", "Monaco"),
            ("af", "Monaco"),
            ("ak", "Monaco"),
            ("am", "·àû·äì·äÆ"),
            ("an", "Monaco"),
            ("ar", "ŸÖŸàŸÜÿßŸÉŸà"),
            ("as", "‡¶Æ‡ßã‡¶®\u{9be}‡¶ï‡ßã"),
            ("ay", "Monaco"),
            ("az", "Monako"),
            ("ba", "Monaco"),
            ("be", "–ú–∞–Ω–∞–∫–∞"),
            ("bg", "–ú–æ–Ω–∞–∫–æ"),
            ("bi", "Monaco"),
            ("bn", "‡¶Æ‡ßã‡¶®\u{9be}‡¶ï‡ßã"),
            ("bn_IN", "‡¶Æ‡ßã‡¶®\u{9be}‡¶ï‡ßã"),
            ("br", "Monako"),
            ("bs", "Monako"),
            ("ca", "M√≤naco"),
            ("ce", "–ú–æ–Ω–∞–∫–æ"),
            ("ch", "Monaco"),
            ("cs", "Monako"),
            ("cv", "–ú–æ–Ω–∞–∫–æ"),
            ("cy", "Monaco"),
            ("da", "Monaco"),
            ("de", "Monaco"),
            ("dv", "ﬁâ\u{7ae}ﬁÇ\u{7a7}ﬁÜ\u{7af}"),
            ("dz", "‡Ωò\u{f7c}‡ºã‡Ωì‡ºã‡ΩÄ\u{f7c}"),
            ("ee", "Monaco"),
            ("el", "ŒúŒøŒΩŒ±Œ∫œå"),
            ("en", "Monaco"),
            ("eo", "Monako"),
            ("es", "M√≥naco"),
            ("et", "Monaco"),
            ("eu", "Monako"),
            ("fa", "ŸÖŸàŸÜÿß⁄©Ÿà"),
            ("ff", "Monako"),
            ("fi", "Monaco"),
            ("fo", "Monako"),
            ("fr", "Monaco"),
            ("fy", "Monako"),
            ("ga", "Monac√≥"),
            ("gl", "M√≥naco"),
            ("gn", "Monaco"),
            ("gu", "‡™Æ‡´ã‡™®\u{ac7}‡™ï‡´ã"),
            ("gv", "Monaco"),
            ("ha", "Monaco"),
            ("he", "◊û◊ï◊†◊ß◊ï"),
            ("hi", "‡§Æ‡•ã‡§®\u{948}‡§ï‡•ã"),
            ("hr", "Monako"),
            ("ht", "Monako"),
            ("hu", "Monaco"),
            ("hy", "’Ñ’∏’∂’°’Ø’∏"),
            ("ia", "Monaco"),
            ("id", "Monako"),
            ("io", "Monako"),
            ("is", "M√≥nak√≥"),
            ("it", "Monaco"),
            ("iu", "Monaco"),
            ("ja", "„É¢„Éä„Ç≥"),
            ("ka", "·Éõ·Éù·Éú·Éê·Éô·Éù"),
            ("ki", "Monaco"),
            ("kk", "–ú–æ–Ω–∞–∫–æ"),
            ("kl", "Monaco"),
            ("km", "·ûò\u{17c9}\u{17bc}·ûé·û∂·ûÄ\u{17bc}"),
            ("kn", "‡≤Æ‡≥ä‡≤®‡≤æ‡≤ï‡≥ã"),
            ("ko", "Î™®ÎÇòÏΩî"),
            ("ku", "Monako"),
            ("kv", "–ú–æ–Ω–∞–∫–æ"),
            ("kw", "Monako"),
            ("ky", "–ú–æ–Ω–∞–∫–æ"),
            ("lo", "‡∫õ‡∫∞‡ªÄ‡∫ó‡∫î‡ªÇ‡∫°‡∫ô‡∫≤‡ªÇ‡∫Å"),
            ("lt", "Monakas"),
            ("lv", "Monako"),
            ("mi", "Manako"),
            ("mk", "–ú–æ–Ω–∞–∫–æ"),
            ("ml", "‡¥Æ‡µä‡¥£\u{d3e}‡¥ï\u{d4d}‡¥ï‡µã"),
            ("mn", "–ú–æ–Ω–∞–∫–æ"),
            ("mr", "‡§Æ‡•ã‡§®\u{945}‡§ï‡•ã"),
            ("ms", "Monaco"),
            ("mt", "Monako"),
            (
                "my",
                "·Äô\u{102d}\u{102f}·Äî·Ä¨·ÄÄ\u{102d}\u{102f}·Äî\u{102d}\u{102f}·ÄÑ\u{103a}·ÄÑ\u{1036}",
            ),
            ("na", "Monako"),
            ("nb", "Monaco"),
            ("ne", "‡§Æ‡•ã‡§®‡§æ‡§ï‡•ã"),
            ("nl", "Monaco"),
            ("nn", "Monaco"),
            ("nv", "Monaco"),
            ("oc", "M√≥negue"),
            ("or", "‡¨Æ‡≠ã‡¨®\u{b3e}‡¨ï‡≠ã"),
            ("pa", "‡®Æ\u{a4b}‡®®‡®ï\u{a4b}"),
            ("pi", "‡§Æ‡•ã‡§®‡§æ‡§ï‡•ã"),
            ("pl", "Monako"),
            ("ps", "Monaco"),
            ("pt", "M√≥naco"),
            ("pt_BR", "M√¥naco"),
            ("ro", "Monaco"),
            ("ru", "–ú–æ–Ω–∞–∫–æ"),
            ("rw", "Monako"),
            ("sc", "M√≤naco"),
            ("sd", "Monaco"),
            ("si", "‡∂∏‡∑ú‡∂±\u{dcf}‡∂ö‡∑ù"),
            ("sk", "Monako"),
            ("sl", "Monako"),
            ("so", "Moonako"),
            ("sq", "Monako"),
            ("sr", "–ú–æ–Ω–∞–∫–æ"),
            ("sv", "Monaco"),
            ("sw", "Monaco"),
            ("ta", "‡ÆÆ‡Øä‡Æ©\u{bbe}‡Æï\u{bcd}‡Æï‡Øã"),
            ("te", "‡∞Æ\u{c4b}‡∞®\u{c3e}‡∞ï\u{c4b}"),
            ("tg", "–ú–æ–Ω–∞–∫–æ"),
            ("th", "‡πÇ‡∏°‡∏ô‡∏≤‡πÇ‡∏Å"),
            ("ti", "Monaco"),
            ("tk", "Monako"),
            ("tl", "Monaco"),
            ("tr", "Monako"),
            ("tt", "–ú–∞–Ω–∞–∫–æ"),
            ("ug", "ŸÖŸàŸÜÿßŸÉŸà"),
            ("uk", "–ú–æ–Ω–∞–∫–æ"),
            ("ur", "ŸÖŸàŸÜÿß⁄©Ÿà"),
            ("uz", "Monako"),
            ("ve", "Monaco"),
            ("vi", "Mo-na-c√¥"),
            ("wa", "Monaco"),
            ("wo", "Monaako"),
            ("xh", "Monaco"),
            ("yo", "M√≥nak√≤"),
            ("zh_CN", "Êë©Á∫≥Âì•"),
            ("zh_HK", "Êë©Á¥çÂì•"),
            ("zh_TW", "Êë©Á¥çÂì•"),
            ("zu", "Monaco"),
        ]),
        #[cfg(feature = "subdivisions")]
        subdivisions: subdivisions::new(),
        g7_member: false,
        g20_member: false,
        eu_member: false,
        eea_member: false,
        vat_rates: None,
        distance_unit: DistanceUnit::Km,
    }
}
